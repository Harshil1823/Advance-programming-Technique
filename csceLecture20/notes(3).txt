polymorphism - takes multiple forms - changes based on the situation

virtual functions - our means of creating polymorphism with our functions
                    in c++


redefined functions: function calls are bound at compile time - based on the 
                     way the pointer on the left was declared
virtual functions: function calls bound at run time - based on the type of 
                   object the pointer points to at the time

4/11 - pure virtual functions, abstract classes, virtual destructors

Every virtual function must either be implemented or made "pure virtual"
To make pure virtual - virtual at the beginning of the prototype, =0 on the 
end of the prototype, don't implement it in that class

A class that has a pure virtual function is an "abstract class" - which means
we can't instantiate objects of that class type

*** If our class has virtual functions, we should make our destructor virtual
    as well so that when a base class pointer that's pointing to a derived 
    class object is deleted, the corresponding destructor will be called in
    addition to the base class destructor
